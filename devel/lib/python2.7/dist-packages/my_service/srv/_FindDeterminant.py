# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_service/FindDeterminantRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FindDeterminantRequest(genpy.Message):
  _md5sum = "bca18a8c3cb1894ca921c32d7608686e"
  _type = "my_service/FindDeterminantRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 c1_r1
int32 c2_r1
int32 c3_r1
int32 c1_r2
int32 c2_r2
int32 c3_r2
int32 c1_r3
int32 c2_r3
int32 c3_r3
"""
  __slots__ = ['c1_r1','c2_r1','c3_r1','c1_r2','c2_r2','c3_r2','c1_r3','c2_r3','c3_r3']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       c1_r1,c2_r1,c3_r1,c1_r2,c2_r2,c3_r2,c1_r3,c2_r3,c3_r3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FindDeterminantRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.c1_r1 is None:
        self.c1_r1 = 0
      if self.c2_r1 is None:
        self.c2_r1 = 0
      if self.c3_r1 is None:
        self.c3_r1 = 0
      if self.c1_r2 is None:
        self.c1_r2 = 0
      if self.c2_r2 is None:
        self.c2_r2 = 0
      if self.c3_r2 is None:
        self.c3_r2 = 0
      if self.c1_r3 is None:
        self.c1_r3 = 0
      if self.c2_r3 is None:
        self.c2_r3 = 0
      if self.c3_r3 is None:
        self.c3_r3 = 0
    else:
      self.c1_r1 = 0
      self.c2_r1 = 0
      self.c3_r1 = 0
      self.c1_r2 = 0
      self.c2_r2 = 0
      self.c3_r2 = 0
      self.c1_r3 = 0
      self.c2_r3 = 0
      self.c3_r3 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9i().pack(_x.c1_r1, _x.c2_r1, _x.c3_r1, _x.c1_r2, _x.c2_r2, _x.c3_r2, _x.c1_r3, _x.c2_r3, _x.c3_r3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.c1_r1, _x.c2_r1, _x.c3_r1, _x.c1_r2, _x.c2_r2, _x.c3_r2, _x.c1_r3, _x.c2_r3, _x.c3_r3,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9i().pack(_x.c1_r1, _x.c2_r1, _x.c3_r1, _x.c1_r2, _x.c2_r2, _x.c3_r2, _x.c1_r3, _x.c2_r3, _x.c3_r3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.c1_r1, _x.c2_r1, _x.c3_r1, _x.c1_r2, _x.c2_r2, _x.c3_r2, _x.c1_r3, _x.c2_r3, _x.c3_r3,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9i = None
def _get_struct_9i():
    global _struct_9i
    if _struct_9i is None:
        _struct_9i = struct.Struct("<9i")
    return _struct_9i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_service/FindDeterminantResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FindDeterminantResponse(genpy.Message):
  _md5sum = "8dff9b0e4bdfce5c55d0b0a1ea9ff1dc"
  _type = "my_service/FindDeterminantResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 determinant

"""
  __slots__ = ['determinant']
  _slot_types = ['float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       determinant

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FindDeterminantResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.determinant is None:
        self.determinant = 0.
    else:
      self.determinant = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.determinant
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.determinant,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.determinant
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.determinant,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
class FindDeterminant(object):
  _type          = 'my_service/FindDeterminant'
  _md5sum = 'bd8356770a8b4b909232e44a583097d8'
  _request_class  = FindDeterminantRequest
  _response_class = FindDeterminantResponse
