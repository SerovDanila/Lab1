// Generated by gencpp from file my_service/FindDeterminantRequest.msg
// DO NOT EDIT!


#ifndef MY_SERVICE_MESSAGE_FINDDETERMINANTREQUEST_H
#define MY_SERVICE_MESSAGE_FINDDETERMINANTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_service
{
template <class ContainerAllocator>
struct FindDeterminantRequest_
{
  typedef FindDeterminantRequest_<ContainerAllocator> Type;

  FindDeterminantRequest_()
    : c1_r1(0)
    , c2_r1(0)
    , c3_r1(0)
    , c1_r2(0)
    , c2_r2(0)
    , c3_r2(0)
    , c1_r3(0)
    , c2_r3(0)
    , c3_r3(0)  {
    }
  FindDeterminantRequest_(const ContainerAllocator& _alloc)
    : c1_r1(0)
    , c2_r1(0)
    , c3_r1(0)
    , c1_r2(0)
    , c2_r2(0)
    , c3_r2(0)
    , c1_r3(0)
    , c2_r3(0)
    , c3_r3(0)  {
  (void)_alloc;
    }



   typedef int32_t _c1_r1_type;
  _c1_r1_type c1_r1;

   typedef int32_t _c2_r1_type;
  _c2_r1_type c2_r1;

   typedef int32_t _c3_r1_type;
  _c3_r1_type c3_r1;

   typedef int32_t _c1_r2_type;
  _c1_r2_type c1_r2;

   typedef int32_t _c2_r2_type;
  _c2_r2_type c2_r2;

   typedef int32_t _c3_r2_type;
  _c3_r2_type c3_r2;

   typedef int32_t _c1_r3_type;
  _c1_r3_type c1_r3;

   typedef int32_t _c2_r3_type;
  _c2_r3_type c2_r3;

   typedef int32_t _c3_r3_type;
  _c3_r3_type c3_r3;





  typedef boost::shared_ptr< ::my_service::FindDeterminantRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_service::FindDeterminantRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FindDeterminantRequest_

typedef ::my_service::FindDeterminantRequest_<std::allocator<void> > FindDeterminantRequest;

typedef boost::shared_ptr< ::my_service::FindDeterminantRequest > FindDeterminantRequestPtr;
typedef boost::shared_ptr< ::my_service::FindDeterminantRequest const> FindDeterminantRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_service::FindDeterminantRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_service::FindDeterminantRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_service::FindDeterminantRequest_<ContainerAllocator1> & lhs, const ::my_service::FindDeterminantRequest_<ContainerAllocator2> & rhs)
{
  return lhs.c1_r1 == rhs.c1_r1 &&
    lhs.c2_r1 == rhs.c2_r1 &&
    lhs.c3_r1 == rhs.c3_r1 &&
    lhs.c1_r2 == rhs.c1_r2 &&
    lhs.c2_r2 == rhs.c2_r2 &&
    lhs.c3_r2 == rhs.c3_r2 &&
    lhs.c1_r3 == rhs.c1_r3 &&
    lhs.c2_r3 == rhs.c2_r3 &&
    lhs.c3_r3 == rhs.c3_r3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_service::FindDeterminantRequest_<ContainerAllocator1> & lhs, const ::my_service::FindDeterminantRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_service::FindDeterminantRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_service::FindDeterminantRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_service::FindDeterminantRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_service::FindDeterminantRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_service::FindDeterminantRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_service::FindDeterminantRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_service::FindDeterminantRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bca18a8c3cb1894ca921c32d7608686e";
  }

  static const char* value(const ::my_service::FindDeterminantRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbca18a8c3cb1894cULL;
  static const uint64_t static_value2 = 0xa921c32d7608686eULL;
};

template<class ContainerAllocator>
struct DataType< ::my_service::FindDeterminantRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_service/FindDeterminantRequest";
  }

  static const char* value(const ::my_service::FindDeterminantRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_service::FindDeterminantRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 c1_r1\n"
"int32 c2_r1\n"
"int32 c3_r1\n"
"int32 c1_r2\n"
"int32 c2_r2\n"
"int32 c3_r2\n"
"int32 c1_r3\n"
"int32 c2_r3\n"
"int32 c3_r3\n"
;
  }

  static const char* value(const ::my_service::FindDeterminantRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_service::FindDeterminantRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.c1_r1);
      stream.next(m.c2_r1);
      stream.next(m.c3_r1);
      stream.next(m.c1_r2);
      stream.next(m.c2_r2);
      stream.next(m.c3_r2);
      stream.next(m.c1_r3);
      stream.next(m.c2_r3);
      stream.next(m.c3_r3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FindDeterminantRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_service::FindDeterminantRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_service::FindDeterminantRequest_<ContainerAllocator>& v)
  {
    s << indent << "c1_r1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c1_r1);
    s << indent << "c2_r1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c2_r1);
    s << indent << "c3_r1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c3_r1);
    s << indent << "c1_r2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c1_r2);
    s << indent << "c2_r2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c2_r2);
    s << indent << "c3_r2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c3_r2);
    s << indent << "c1_r3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c1_r3);
    s << indent << "c2_r3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c2_r3);
    s << indent << "c3_r3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c3_r3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_SERVICE_MESSAGE_FINDDETERMINANTREQUEST_H
